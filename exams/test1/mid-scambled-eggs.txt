cmps112-2009q1-test1.tt:1:CMPS-112 · Comparative Programming Languages · Winter 2009 · page 11of 3
cmps112-2009q1-test1.tt:2:$Id: cmps112-2009q1-exam1.mm,v 9.38 2009-01-29 19:51:02-08 - - $
cmps112-2009q1-test1.tt:3:
cmps112-2009q1-test1.tt:4:.PS
cmps112-2009q1-test1.tt:5:examboxes(3,30)
cmps112-2009q1-test1.tt:6:.PE
cmps112-2009q1-test1.tt:7:
cmps112-2009q1-test1.tt:8:No books;  No calculator;  No computer;  No email;  No internet;  No
cmps112-2009q1-test1.tt:9:notes;  No phone.  Neatness counts!  Do your scratch work elsewhere and
cmps112-2009q1-test1.tt:10:enter only your final answer into the spaces provided.
cmps112-2009q1-test1.tt:11:
cmps112-2009q1-test1.tt:12: 1. In the following table, there are fragmentary examples of various
cmps112-2009q1-test1.tt:13:    kinds of polymorphism.  In each box, identify the example by writing
cmps112-2009q1-test1.tt:14:    one of the words:  ad hoc;  universal.  Then further identify them
cmps112-2009q1-test1.tt:15:    by writing one of the words:  conversion;  inheritance;
cmps112-2009q1-test1.tt:16:    overloading;  template.  [2pt]
cmps112-2009q1-test1.tt:17:
cmps112-2009q1-test1.tt:18:    +-------------------------------+-------------------------------+
cmps112-2009q1-test1.tt:19:    |class foo {void f(); }         |class stack<item_t> {          |
cmps112-2009q1-test1.tt:20:    |class bar: public foo {        |void push (item_t); }          |
cmps112-2009q1-test1.tt:21:    |void f(); }                    |                               |
cmps112-2009q1-test1.tt:22:    +-------------------------------+-------------------------------+
cmps112-2009q1-test1.tt:23:    |int add (int x, int y);        |double f (double x);           |
cmps112-2009q1-test1.tt:24:    |double add (double x,          |f (6);                         |
cmps112-2009q1-test1.tt:25:    |double y);                     |                               |
cmps112-2009q1-test1.tt:26:    +-------------------------------+-------------------------------+
cmps112-2009q1-test1.tt:27:
cmps112-2009q1-test1.tt:28: 2. Write a Perl program which reads in a sequence of lines using <>.
cmps112-2009q1-test1.tt:29:    Each line consists of a key and a value separated by an equal (=)
cmps112-2009q1-test1.tt:30:    sign.  Strip off leading and trailing whitespace from each key and
cmps112-2009q1-test1.tt:31:    value.  Put the key and value into a hash.  Print an error message
cmps112-2009q1-test1.tt:32:    if any line does not have an equal sign, but ignore any line
cmps112-2009q1-test1.tt:33:    containing only whitespace.  At end of file, print out each key and
cmps112-2009q1-test1.tt:34:    value pair in lexicographic order.  You need not use strict or use
cmps112-2009q1-test1.tt:35:    warnings.  [4pt]
cmps112-2009q1-test1.tt:36:
cmps112-2009q1-test1.tt:37: 3. Write a function in Perl which takes a filename as an argument and
cmps112-2009q1-test1.tt:38:    prints out a lexicographically sorted list of words in the file.
cmps112-2009q1-test1.tt:39:    Each word is printed only once, followed by a list of line numbers
cmps112-2009q1-test1.tt:40:    where they occur.  A word is any sequence of characters that match
cmps112-2009q1-test1.tt:41:    \S+ (Note the capital S, meaning non-whitespace.)  [4pt]
cmps112-2009q1-test1.tt:42:
cmps112-2009q1-test1.tt:43:    sub makexref ($) {                                             Example output:   bar 7 7 88 88 9
cmps112-2009q1-test1.tt:44:       my ($filename) = @_;                                                          foo 3 44 98
cmps112-2009q1-test1.tt:45:       open my $file, "<$filename" or die "$0: $filename: $!\n";
cmps112-2009q1-test1.tt:46:
cmps112-2009q1-test1.tt:47: 4. Write the prototypes for the four default members of class box that
cmps112-2009q1-test1.tt:48:    are automatically added to a class if not explicitly overriden.
cmps112-2009q1-test1.tt:49:    [2pt]
cmps112-2009q1-test1.tt:50:
cmps112-2009q1-test1.tt:51:    class box {
cmps112-2009q1-test1.tt:52:
cmps112-2009q1-test1.tt:53: 5. In perl, lexical scope is introduced by the my declaration, while
cmps112-2009q1-test1.tt:54:    dynamic scope is introduced via a local declaration.  Lacking a
cmps112-2009q1-test1.tt:55:    declaration implies global scope.  What is the output of running
cmps112-2009q1-test1.tt:56:    this program with each of the statements on the right?  [2pt]
cmps112-2009q1-test1.tt:57:
cmps112-2009q1-test1.tt:58:    +-----------------------------------------------------------------+---------------------+
cmps112-2009q1-test1.tt:59:    |                                                                 | scope.perl 0        |
cmps112-2009q1-test1.tt:60:    |                                                                 |                     |
cmps112-2009q1-test1.tt:61:    |%fn = ("0" => sub {print "0=$var."},                             +---------------------+
cmps112-2009q1-test1.tt:62:    |       "d" => sub {local $var = "dyn"; yes(); print "d=$var. "}, | scope.perl s        |
cmps112-2009q1-test1.tt:63:    |       "s" => sub {my $var = "stat"; yes(); print "s=$var. "},   |                     |
cmps112-2009q1-test1.tt:64:    |       "g" => sub {$var = "foo"; yes(); print "f=$var. "},       +---------------------+
cmps112-2009q1-test1.tt:65:    |      );                                                         | scope.perl d        |
cmps112-2009q1-test1.tt:66:    |sub yes {$var = "yes"}                                           |                     |
cmps112-2009q1-test1.tt:67:    |$var = "glo"; $fn{$ARGV[0]}(); print "//$var\n";                 +---------------------+
cmps112-2009q1-test1.tt:68:    |                                                                 | scope.perl g        |
cmps112-2009q1-test1.tt:69:    |                                                                 |                     |
cmps112-2009q1-test1.tt:70:    +-----------------------------------------------------------------+---------------------+
cmps112-2009q1-test1.tt:71:
cmps112-2009q1-test1.tt:72: 6. Inheritance in C++.  Your answers should be as minimal as possible,
cmps112-2009q1-test1.tt:73:    provided the question is answered.  You don't need to provide a main
cmps112-2009q1-test1.tt:74:    function nor any constructors.
cmps112-2009q1-test1.tt:75:
cmps112-2009q1-test1.tt:76:     (a) Define a base class base with an abstract function
cmps112-2009q1-test1.tt:77:         void print().  Define a class dstr which is derived form base
cmps112-2009q1-test1.tt:78:         with a private string field and which overrides the base's
cmps112-2009q1-test1.tt:79:         function print.  Define a class dint which does the same, but
cmps112-2009q1-test1.tt:80:         with an int field.  Show only what goes in base.h and do not
cmps112-2009q1-test1.tt:81:         define any inline functions.  If we have a variable base *p,
cmps112-2009q1-test1.tt:82:         then p->print();  should print the string or integer field, as
cmps112-2009q1-test1.tt:83:         appropriate.  [3pt]
cmps112-2009q1-test1.tt:84:
cmps112-2009q1-test1.tt:85:     (b) Show the implementation of both print functions as they would
cmps112-2009q1-test1.tt:86:         appear in base.cc.  [3pt]
cmps112-2009q1-test1.tt:87:
cmps112-2009q1-test1.tt:88:.EQ
cmps112-2009q1-test1.tt:89:delim $$
cmps112-2009q1-test1.tt:90:.EN
cmps112-2009q1-test1.tt:91:
cmps112-2009q1-test1.tt:92:Multiple choice.  To the left of each question, write the letter that
cmps112-2009q1-test1.tt:93:indicates your answer.  Write `Z' if you don't want to risk a wrong
cmps112-2009q1-test1.tt:94:answer.  Wrong answers are worth negative points.  [11pt]
cmps112-2009q1-test1.tt:95:
cmps112-2009q1-test1.tt:96:+--------------------------+------+------+------------+
cmps112-2009q1-test1.tt:97:|number of                 |      |× 1 = |      $= a$ |
cmps112-2009q1-test1.tt:98:|correct answers           |      |      |            |
cmps112-2009q1-test1.tt:99:+--------------------------+------+------+------------+
cmps112-2009q1-test1.tt:100:|number of                 |      |× ½ = |      $= b$ |
cmps112-2009q1-test1.tt:101:|wrong answers             |      |      |            |
cmps112-2009q1-test1.tt:102:+--------------------------+------+------+------------+
cmps112-2009q1-test1.tt:103:|number of                 |      |× 0 = |  0         |
cmps112-2009q1-test1.tt:104:|missing answers           |      |      |            |
cmps112-2009q1-test1.tt:105:+--------------------------+------+------+------------+
cmps112-2009q1-test1.tt:106:|column total              |   11 |      |      $= c$ |
cmps112-2009q1-test1.tt:107:|$ c = max ( a - b , 0 ) $ |      |      |            |
cmps112-2009q1-test1.tt:108:+--------------------------+------+------+------------+
cmps112-2009q1-test1.tt:109:
cmps112-2009q1-test1.tt:110: 1. Which expression is not valid, given the following two declarations?
cmps112-2009q1-test1.tt:111:       int *p; int i;
cmps112-2009q1-test1.tt:112:    (A) i + i
cmps112-2009q1-test1.tt:113:    (B) i + p
cmps112-2009q1-test1.tt:114:    (C) p + i
cmps112-2009q1-test1.tt:115:    (D) p + p
cmps112-2009q1-test1.tt:116:
cmps112-2009q1-test1.tt:117: 2. C++ is primarily thought of as an example of what kind of language?
cmps112-2009q1-test1.tt:118:    (A) functional
cmps112-2009q1-test1.tt:119:    (B) imperative
cmps112-2009q1-test1.tt:120:    (C) logic
cmps112-2009q1-test1.tt:121:    (D) object oriented
cmps112-2009q1-test1.tt:122:
cmps112-2009q1-test1.tt:123: 3. The address of a static variable in C++ is determined at what time?
cmps112-2009q1-test1.tt:124:    (A) compile
cmps112-2009q1-test1.tt:125:    (B) during a function call
cmps112-2009q1-test1.tt:126:    (C) link
cmps112-2009q1-test1.tt:127:    (D) program exec
cmps112-2009q1-test1.tt:128:
cmps112-2009q1-test1.tt:129: 4. What time is the address returned by new determinaed?
cmps112-2009q1-test1.tt:130:    (A) compile
cmps112-2009q1-test1.tt:131:    (B) during a function call
cmps112-2009q1-test1.tt:132:    (C) link
cmps112-2009q1-test1.tt:133:    (D) program exec
cmps112-2009q1-test1.tt:134:
cmps112-2009q1-test1.tt:135: 5. What is the name of the C++ variable used to print error messages?
cmps112-2009q1-test1.tt:136:    (A) STDERR
cmps112-2009q1-test1.tt:137:    (B) System.err
cmps112-2009q1-test1.tt:138:    (C) cerr
cmps112-2009q1-test1.tt:139:    (D) stderr
cmps112-2009q1-test1.tt:140:
cmps112-2009q1-test1.tt:141: 6. The following two declarations are examples of:
cmps112-2009q1-test1.tt:142:    ostream &operator<< (ostream &,
cmps112-2009q1-test1.tt:143:                const string &);
cmps112-2009q1-test1.tt:144:    template <typename item_t>
cmps112-2009q1-test1.tt:145:    ostream &operator<< (ostream &,
cmps112-2009q1-test1.tt:146:                const vector<item_t> &);
cmps112-2009q1-test1.tt:147:    (A) overhanging
cmps112-2009q1-test1.tt:148:    (B) overlapping
cmps112-2009q1-test1.tt:149:    (C) overloading
cmps112-2009q1-test1.tt:150:    (D) overriding
cmps112-2009q1-test1.tt:151:
cmps112-2009q1-test1.tt:152: 7. In C++, a protected field of a class foo is visible only to
cmps112-2009q1-test1.tt:153:    functions which are members:
cmps112-2009q1-test1.tt:154:    (A) of foo, and any class that inherits from foo.
cmps112-2009q1-test1.tt:155:    (B) of foo, any class that inherits from foo, and any class that foo
cmps112-2009q1-test1.tt:156:        names as a friend
cmps112-2009q1-test1.tt:157:    (C) of foo, any class that inherits from foo, and any class that
cmps112-2009q1-test1.tt:158:        names foo as a friend
cmps112-2009q1-test1.tt:159:    (D) only of foo.
cmps112-2009q1-test1.tt:160:
cmps112-2009q1-test1.tt:161: 8. Of the following languages, which is oldest?
cmps112-2009q1-test1.tt:162:    (A) Algol 60
cmps112-2009q1-test1.tt:163:    (B) C++
cmps112-2009q1-test1.tt:164:    (C) Fortran
cmps112-2009q1-test1.tt:165:    (D) Java
cmps112-2009q1-test1.tt:166:
cmps112-2009q1-test1.tt:167: 9. Which of these is a C++ keyword that might cause a pointer to become
cmps112-2009q1-test1.tt:168:    dangling?
cmps112-2009q1-test1.tt:169:    (A) delete
cmps112-2009q1-test1.tt:170:    (B) free
cmps112-2009q1-test1.tt:171:    (C) malloc
cmps112-2009q1-test1.tt:172:    (D) new
cmps112-2009q1-test1.tt:173:
cmps112-2009q1-test1.tt:174:10. In C++, if we have a call of the form a.f(x,y), inside the function
cmps112-2009q1-test1.tt:175:    f, how is a field x in the object a referred to?
cmps112-2009q1-test1.tt:176:    (A) this->*x
cmps112-2009q1-test1.tt:177:    (B) this->x
cmps112-2009q1-test1.tt:178:    (C) this.x
cmps112-2009q1-test1.tt:179:    (D) this[x]
cmps112-2009q1-test1.tt:180:
cmps112-2009q1-test1.tt:181:11. A Case against the GO TO Statement.
cmps112-2009q1-test1.tt:182:    (A) Edsger Dijkstra
cmps112-2009q1-test1.tt:183:    (B) Grace Hopper
cmps112-2009q1-test1.tt:184:    (C) Donald Knuth
cmps112-2009q1-test1.tt:185:    (D) Niklaus Wirth
cmps112-2009q1-test1.tt:186:
cmps112-2009q1-test1.tt:188:
cmps112-2009q1-test1.tt:189:   Total:  31 *
cmps112-2009q1-test1.tt:190:
cmps112-2011q2-test1.tt:1:CMPS-112 · Comparative Programming Languages · Winter 2011 pages1 of 1
cmps112-2011q2-test1.tt:2:$Id: cmps112-2011q2-exam1.mm,v 1.44 2011-04-22 19:59:22-07 - - $
cmps112-2011q2-test1.tt:3:
cmps112-2011q2-test1.tt:4:.PS
cmps112-2011q2-test1.tt:5:examboxes(3)
cmps112-2011q2-test1.tt:6:.PE
cmps112-2011q2-test1.tt:7:
cmps112-2011q2-test1.tt:8:No books;  No calculator;  No computer;  No email;  No internet;  No
cmps112-2011q2-test1.tt:9:notes;  No phone.  Neatness counts!  Do your scratch work elsewhere
cmps112-2011q2-test1.tt:10:and enter only your final answer into the spaces provided.
cmps112-2011q2-test1.tt:11:
cmps112-2011q2-test1.tt:12:.EQ
cmps112-2011q2-test1.tt:13:delim $$
cmps112-2011q2-test1.tt:14:.EN
cmps112-2011q2-test1.tt:15:
cmps112-2011q2-test1.tt:16: 1. Fill in the blank with a lambda expression so that mul behaves as
cmps112-2011q2-test1.tt:17:    shown here.  [1pt]
cmps112-2011q2-test1.tt:18:    The answer, in Perl, would be:
cmps112-2011q2-test1.tt:19:    my $mul = sub {my $x = $_[0]; sub {$x * $_[0]}};  print
cmps112-2011q2-test1.tt:20:    $mul->(3)->(4), "\n";
cmps112-2011q2-test1.tt:21:
cmps112-2011q2-test1.tt:22:    > (define mul (______________________________))
cmps112-2011q2-test1.tt:23:    > ((mul 3) 4)
cmps112-2011q2-test1.tt:24:    12
cmps112-2011q2-test1.tt:25:
cmps112-2011q2-test1.tt:26: 2. Fill in the following table.  Answers (in alphabetical order) are:
cmps112-2011q2-test1.tt:27:    John Backus;  Grace Hopper et.al.;  John Kemeny & Thomas Kurtz;
cmps112-2011q2-test1.tt:28:    John McCarthy.  [1pt]
cmps112-2011q2-test1.tt:29:
cmps112-2011q2-test1.tt:30:    +---------------+----------------+----------------+----------------+
cmps112-2011q2-test1.tt:31:    |FORTRAN (1957) | LISP (1958)    | COBOL (1959)   | BASIC (1964)   |
cmps112-2011q2-test1.tt:32:    |               |                |                |                |
cmps112-2011q2-test1.tt:33:    +---------------+----------------+----------------+----------------+
cmps112-2011q2-test1.tt:34:
cmps112-2011q2-test1.tt:35: 3. Write an expression in Java using the operator && which will
cmps112-2011q2-test1.tt:36:    return a result because && is a lazy operator, but which would
cmps112-2011q2-test1.tt:37:    throw an exception if it were evaluated eagerly.  [1pt]
cmps112-2011q2-test1.tt:38:
cmps112-2011q2-test1.tt:39: 4. Write a Perl program that will read STDIN and print the number of
cmps112-2011q2-test1.tt:40:    characters, words, and lines in the file.  A word is any sequence
cmps112-2011q2-test1.tt:41:    of non-whitespace characters.  [2pt]
cmps112-2011q2-test1.tt:42:
cmps112-2011q2-test1.tt:43:    % cat t
cmps112-2011q2-test1.tt:44:    this is a test
cmps112-2011q2-test1.tt:45:    second line
cmps112-2011q2-test1.tt:46:    last line in the file
cmps112-2011q2-test1.tt:47:    % wc.perl  <t
cmps112-2011q2-test1.tt:48:          3      11      49
cmps112-2011q2-test1.tt:49:
cmps112-2011q2-test1.tt:50: 5. Define a function in Scheme whose first argument is a predicate (a
cmps112-2011q2-test1.tt:51:    function of one argument which returns either #t or #f) and whose
cmps112-2011q2-test1.tt:52:    second argument is a list.  If the predicate returns #t for any
cmps112-2011q2-test1.tt:53:    element of the list, contains returns #t, otherwise it returns #f.
cmps112-2011q2-test1.tt:54:    [2pt]
cmps112-2011q2-test1.tt:55:
cmps112-2011q2-test1.tt:56:    > (contains (lambda (x) (= x 3)) '(1 2 3 4))
cmps112-2011q2-test1.tt:57:    #t
cmps112-2011q2-test1.tt:58:    > (contains (lambda (x) (> x 9)) '(1 2 3 4))
cmps112-2011q2-test1.tt:59:    #f
cmps112-2011q2-test1.tt:60:
cmps112-2011q2-test1.tt:61: 6. Write a program in Perl which reads either the standard input or
cmps112-2011q2-test1.tt:62:    all of the files whose names are given on the command line and
cmps112-2011q2-test1.tt:63:    prints out each word followed by the number of times it appears in
cmps112-2011q2-test1.tt:64:    the file.  Words are printed in lexicographic order.  A word
cmps112-2011q2-test1.tt:65:    matches \w+ and each word is printed only once.  Your program must
cmps112-2011q2-test1.tt:66:    use strict; use warnings;.  [3pt]
cmps112-2011q2-test1.tt:67:
cmps112-2011q2-test1.tt:68:    % ./count.perl f1 f2
cmps112-2011q2-test1.tt:69:    a 4
cmps112-2011q2-test1.tt:70:    file 10
cmps112-2011q2-test1.tt:71:    second 2
cmps112-2011q2-test1.tt:72:    test 4
cmps112-2011q2-test1.tt:73:    the 10
cmps112-2011q2-test1.tt:74:
cmps112-2011q2-test1.tt:75: 7. Define a Scheme function map2 whose arguments are a binary
cmps112-2011q2-test1.tt:76:    function and two lists.  It returns a list whose length is the
cmps112-2011q2-test1.tt:77:    same as the shorter list consisting of elements by using the
cmps112-2011q2-test1.tt:78:    function to combine corresponding elements of the list.  [3pt]
cmps112-2011q2-test1.tt:79:
cmps112-2011q2-test1.tt:80:    > (map2 * '(1 2 3) '(4 5 6))
cmps112-2011q2-test1.tt:81:    (4 10 18)
cmps112-2011q2-test1.tt:82:    > (map2 = '(1 2 3) '(1 4 3 8 9))
cmps112-2011q2-test1.tt:83:    (#t #f #t)
cmps112-2011q2-test1.tt:84:
cmps112-2011q2-test1.tt:85: 8. Define a function foldl which takes a function, a unit value, and
cmps112-2011q2-test1.tt:86:    a list, and returns a single value by applying the function
cmps112-2011q2-test1.tt:87:    between each member of the list.  It must be tail recursive.
cmps112-2011q2-test1.tt:88:    [2pt]
cmps112-2011q2-test1.tt:89:
cmps112-2011q2-test1.tt:90:    > (foldl + 0 '(4 10 18))
cmps112-2011q2-test1.tt:91:    27
cmps112-2011q2-test1.tt:92:    > (foldl cons '() '(1 2 3))
cmps112-2011q2-test1.tt:93:    (((() . 1) . 2) . 3)
cmps112-2011q2-test1.tt:94:
cmps112-2011q2-test1.tt:95: 9. Define a function ip which computes the inner product of two lists
cmps112-2011q2-test1.tt:96:    by using map2 and foldl.  Elements of the two lists are pair-wise
cmps112-2011q2-test1.tt:97:    multiplied together, and the sum is taken.  [1pt]
cmps112-2011q2-test1.tt:98:
cmps112-2011q2-test1.tt:99:    > (ip '(1 2 3) '(4 5 6))
cmps112-2011q2-test1.tt:100:    32
cmps112-2011q2-test1.tt:101:
cmps112-2011q2-test1.tt:102:10. Explain the difference between static and dynamic scope, and give
cmps112-2011q2-test1.tt:103:    an example of each.  [2pt]
cmps112-2011q2-test1.tt:104:
cmps112-2011q2-test1.tt:105:11. Draw a picture of the following Scheme expression.  For each cell,
cmps112-2011q2-test1.tt:106:    draw a rectangular box with two fields in it, and draw a pointer
cmps112-2011q2-test1.tt:107:    from inside the box to the thing being pointed at.  Atoms are
cmps112-2011q2-test1.tt:108:    drawn outside of all of these boxes.  [2pt]
cmps112-2011q2-test1.tt:109:    ((a b c) (d ((e)) f 6))
cmps112-2011q2-test1.tt:110:
cmps112-2011q2-test1.tt:111:Multiple choice.  To the left of each question, write the letter that
cmps112-2011q2-test1.tt:112:indicates your answer.  Write Z if you don't want to risk a wrong
cmps112-2011q2-test1.tt:113:answer.  Wrong answers are worth negative points.  [11pt]
cmps112-2011q2-test1.tt:114:
cmps112-2011q2-test1.tt:115:+--------------------------+------+------+------------+
cmps112-2011q2-test1.tt:116:|number of                 |      |× 1 = |      $= a$ |
cmps112-2011q2-test1.tt:117:|correct answers           |      |      |            |
cmps112-2011q2-test1.tt:118:+--------------------------+------+------+------------+
cmps112-2011q2-test1.tt:119:|number of                 |      |× ½ = |      $= b$ |
cmps112-2011q2-test1.tt:120:|wrong answers             |      |      |            |
cmps112-2011q2-test1.tt:121:+--------------------------+------+------+------------+
cmps112-2011q2-test1.tt:122:|number of                 |      |× 0 = |  0         |
cmps112-2011q2-test1.tt:123:|missing answers           |      |      |            |
cmps112-2011q2-test1.tt:124:+--------------------------+------+------+------------+
cmps112-2011q2-test1.tt:125:|column total              |   11 |      |      $= c$ |
cmps112-2011q2-test1.tt:126:|$ c = max ( a - b , 0 ) $ |      |      |            |
cmps112-2011q2-test1.tt:127:+--------------------------+------+------+------------+
cmps112-2011q2-test1.tt:128:
cmps112-2011q2-test1.tt:129: 1. Which of the following Java operators uses lazy evaluation?
cmps112-2011q2-test1.tt:130:    (A) &&
cmps112-2011q2-test1.tt:131:    (B) ++
cmps112-2011q2-test1.tt:132:    (C) ==
cmps112-2011q2-test1.tt:133:    (D) >>
cmps112-2011q2-test1.tt:134:
cmps112-2011q2-test1.tt:135: 2. Which Scheme expression will evaluate to the atom 2?
cmps112-2011q2-test1.tt:136:    (A) (caar '(1 2 3))
cmps112-2011q2-test1.tt:137:    (B) (cadr '(1 2 3))
cmps112-2011q2-test1.tt:138:    (C) (cdar '(1 2 3))
cmps112-2011q2-test1.tt:139:    (D) (cddr '(1 2 3))
cmps112-2011q2-test1.tt:140:
cmps112-2011q2-test1.tt:141: 3. Which of the following is a higher-order function whose arguments
cmps112-2011q2-test1.tt:142:    are a function and a list, and whose result is a list containing
cmps112-2011q2-test1.tt:143:    the results of having applied the function to each element of the
cmps112-2011q2-test1.tt:144:    list?
cmps112-2011q2-test1.tt:145:    (A) filter
cmps112-2011q2-test1.tt:146:    (B) foldl
cmps112-2011q2-test1.tt:147:    (C) lambda
cmps112-2011q2-test1.tt:148:    (D) map
cmps112-2011q2-test1.tt:149:
cmps112-2011q2-test1.tt:150: 4. For a list of length $n$, foldr, which does not use tail
cmps112-2011q2-test1.tt:151:    recursion, will take up how much stack space?
cmps112-2011q2-test1.tt:152:    (A) $ O ( 1 ) $
cmps112-2011q2-test1.tt:153:    (B) $ O ( log n ) $
cmps112-2011q2-test1.tt:154:    (C) $ O ( n ) $
cmps112-2011q2-test1.tt:155:    (D) $ O ( n log n ) $
cmps112-2011q2-test1.tt:156:
cmps112-2011q2-test1.tt:157: 5. When is a static variable in C bound to a specific virtual
cmps112-2011q2-test1.tt:158:    address?
cmps112-2011q2-test1.tt:159:    (A) When the compiler produces an object file.
cmps112-2011q2-test1.tt:160:    (B) When the linker produces an executable image.
cmps112-2011q2-test1.tt:161:    (C) When the program is loaded via the exec system call.
cmps112-2011q2-test1.tt:162:    (D) When the main function is called.
cmps112-2011q2-test1.tt:163:
cmps112-2011q2-test1.tt:164: 6. A variable declared inside a C or Java function has:
cmps112-2011q2-test1.tt:165:    (A) Dynamic scope and dynamic lifetime.
cmps112-2011q2-test1.tt:166:    (B) Dynamic scope and static lifetime.
cmps112-2011q2-test1.tt:167:    (C) Static scope and dynamic lifetime.
cmps112-2011q2-test1.tt:168:    (D) Static scope and static lifetime.
cmps112-2011q2-test1.tt:169:
cmps112-2011q2-test1.tt:170: 7. With respect to Java, the term ``overloading'' refers to:
cmps112-2011q2-test1.tt:171:    (A) Automatic type conversion when the argument does not match the
cmps112-2011q2-test1.tt:172:        declared type of the parameter.
cmps112-2011q2-test1.tt:173:    (B) Generic classes with type parameterization.
cmps112-2011q2-test1.tt:174:    (C) Multiple functions with the same name and different
cmps112-2011q2-test1.tt:175:        signatures, defined in the same class.
cmps112-2011q2-test1.tt:176:    (D) Multiple functions with the same name and signature, defined
cmps112-2011q2-test1.tt:177:        in different classes.
cmps112-2011q2-test1.tt:178:
cmps112-2011q2-test1.tt:179: 8. Perl and Scheme are languages whose type checking is:
cmps112-2011q2-test1.tt:180:    (A) Strong and dynamic.
cmps112-2011q2-test1.tt:181:    (B) Strong and static.
cmps112-2011q2-test1.tt:182:    (C) Weak and dynamic.
cmps112-2011q2-test1.tt:183:    (D) Weak and static.
cmps112-2011q2-test1.tt:184:
cmps112-2011q2-test1.tt:185: 9. After a Perl program has executed a subprocess, the completion
cmps112-2011q2-test1.tt:186:    status of that process is available in what variable?
cmps112-2011q2-test1.tt:187:    (A) $!
cmps112-2011q2-test1.tt:188:    (B) $&
cmps112-2011q2-test1.tt:189:    (C) $?
cmps112-2011q2-test1.tt:190:    (D) $_
cmps112-2011q2-test1.tt:191:
cmps112-2011q2-test1.tt:192:10. Which expression will cause the empty list to be passed into f?
cmps112-2011q2-test1.tt:193:    (A) (f '())
cmps112-2011q2-test1.tt:194:    (B) (f ())
cmps112-2011q2-test1.tt:195:    (C) (f null?)
cmps112-2011q2-test1.tt:196:    (D) f (null)
cmps112-2011q2-test1.tt:197:
cmps112-2011q2-test1.tt:198:11. Which of these languages was designed for use in business,
cmps112-2011q2-test1.tt:199:    finance, and administrative systems for companies and governments.
cmps112-2011q2-test1.tt:200:    (A) BASIC
cmps112-2011q2-test1.tt:201:    (B) COBOL
cmps112-2011q2-test1.tt:202:    (C) FORTRAN
cmps112-2011q2-test1.tt:203:    (D) LISP
cmps112-2011q2-test1.tt:204:
cmps112-2011q2-test1.tt:206:
cmps112-2011q2-test1.tt:207:*  From http://community.schemewiki.org/?scheme-fortune-cookies:
cmps112-2011q2-test1.tt:208:
cmps112-2011q2-test1.tt:209:   ``Around here, arguing that Java is better than C++ is like arguing
cmps112-2011q2-test1.tt:210:   that grasshoppers taste better than tree bark.''  --- Thant Tessman
cmps112-2011q2-test1.tt:211:   <thant@acm.org> in comp.lang.scheme.
cmps112-2011q2-test1.tt:212:   ``Functional  programming  is  like  describing  your  problem to a
cmps112-2011q2-test1.tt:213:   mathematician.  Imperative programming is like giving  instructions
cmps112-2011q2-test1.tt:214:   to an idiot.''  --- arcus, #scheme on Freenode.
cmps112-2011q2-test1.tt:215:
cmps112-2012q1-test1.tt:1:CMPS-112 · Programming Languages · Winter 2012 · Test #1   page 1 of 1
cmps112-2012q1-test1.tt:2:$Id: cmps112-2012q1-exam1.mm,v 1.17 2012-02-03 19:00:34-08 - - $
cmps112-2012q1-test1.tt:3:
cmps112-2012q1-test1.tt:4:.PS
cmps112-2012q1-test1.tt:5:examboxes(3)
cmps112-2012q1-test1.tt:6:.PE
cmps112-2012q1-test1.tt:7:
cmps112-2012q1-test1.tt:8:No books;  No calculator;  No computer;  No email;  No internet;  No
cmps112-2012q1-test1.tt:9:notes;  No phone.  Neatness counts!  Do your scratch work elsewhere
cmps112-2012q1-test1.tt:10:and enter only your final answer into the spaces provided.
cmps112-2012q1-test1.tt:11:
cmps112-2012q1-test1.tt:12:.EQ
cmps112-2012q1-test1.tt:13:delim $$
cmps112-2012q1-test1.tt:14:.EN
cmps112-2012q1-test1.tt:15:
cmps112-2012q1-test1.tt:16: 1. Define a function grep in Scheme whose first argument is a
cmps112-2012q1-test1.tt:17:    predicate and second argument a list.  It returns a new list of
cmps112-2012q1-test1.tt:18:    all of the elements of the argument list for which the predicate
cmps112-2012q1-test1.tt:19:    is true.  Do not use a higher-order function.  [2pt]
cmps112-2012q1-test1.tt:20:
cmps112-2012q1-test1.tt:21: 2. Define a function positives which uses grep (above) to accept a
cmps112-2012q1-test1.tt:22:    list of numbers and return only the positive ones.  Use a lambda
cmps112-2012q1-test1.tt:23:    expression, not a function name, as one of its arguments.  [1pt]
cmps112-2012q1-test1.tt:24:
cmps112-2012q1-test1.tt:25: 3. Define a function sum which returns the sum of all elements of a
cmps112-2012q1-test1.tt:26:    list.  Do not use any higher-order functions.  Use constant ($ O (
cmps112-2012q1-test1.tt:27:    1 ) $) stack space.  [2pt]
cmps112-2012q1-test1.tt:28:
cmps112-2012q1-test1.tt:29: 4. Define the same function sum using the higher-order function
cmps112-2012q1-test1.tt:30:    foldleft, whose arguments are a unit value, a binary function, and
cmps112-2012q1-test1.tt:31:    a list.  [1pt]
cmps112-2012q1-test1.tt:32:
cmps112-2012q1-test1.tt:33: 5. Name the two kinds of universal polymorphism and give an example
cmps112-2012q1-test1.tt:34:    of each.  [2pt]
cmps112-2012q1-test1.tt:35:
cmps112-2012q1-test1.tt:36: 6. Name the two kinds of ad hoc polymorphism and give an example of
cmps112-2012q1-test1.tt:37:    each.  [2pt]
cmps112-2012q1-test1.tt:38:
cmps112-2012q1-test1.tt:39: 7. Write a complete program in Perl that reads in words from all of
cmps112-2012q1-test1.tt:40:    the filenames specified in @ARGV, and after end of file of the
cmps112-2012q1-test1.tt:41:    last file, prints out each word, one per line, sorted
cmps112-2012q1-test1.tt:42:    lexicographically, with each word followed by a count of the
cmps112-2012q1-test1.tt:43:    number of times it occurred.  Exit status is 0 for success and 1
cmps112-2012q1-test1.tt:44:    if any file could not be opened.  Print suitable error messaages
cmps112-2012q1-test1.tt:45:    for files that could not be opened.  If no files are specified,
cmps112-2012q1-test1.tt:46:    read the standard input.  Do not use the <> operator.  Use /\w+/
cmps112-2012q1-test1.tt:47:    to match words or /\W+/ to split delimiters.  If @ARGV is empty,
cmps112-2012q1-test1.tt:48:    use "-" (standard input).  [5pt]
cmps112-2012q1-test1.tt:49:
cmps112-2012q1-test1.tt:50:    #!/usr/bin/perl
cmps112-2012q1-test1.tt:51:    use strict;
cmps112-2012q1-test1.tt:52:    use warnings;
cmps112-2012q1-test1.tt:53:    $0 =~ s|.*/||;
cmps112-2012q1-test1.tt:54:
cmps112-2012q1-test1.tt:55: 8. Define the function zip in Scheme.  It takes a function and a pair
cmps112-2012q1-test1.tt:56:    of lists and returns a list having pairwise applied the function
cmps112-2012q1-test1.tt:57:    to corresponding pairs of elements in the list.  If the lists are
cmps112-2012q1-test1.tt:58:    of unequal length, the function stops when the shorter list runs
cmps112-2012q1-test1.tt:59:    out.  [2pt]
cmps112-2012q1-test1.tt:60:    Example:  (zip + '(1 2 3) '(4 5 6 7))
cmps112-2012q1-test1.tt:61:    Returns:  (5 7 9)
cmps112-2012q1-test1.tt:62:
cmps112-2012q1-test1.tt:63: 9. Define the same function in Perl.  It takes a reference to a
cmps112-2012q1-test1.tt:64:    function of two arguments, followed by references to two arrays
cmps112-2012q1-test1.tt:65:    and applies the function pairwise to the arrays, returning an
cmps112-2012q1-test1.tt:66:    array of the shorter length.  [2pt]
cmps112-2012q1-test1.tt:67:    Example:  @y = zip sub{$_[0]+$_[1]}, [1, 2, 3], [4, 5, 6, 7];
cmps112-2012q1-test1.tt:68:    print "@y\n";
cmps112-2012q1-test1.tt:69:    Prints:  5 7 9
cmps112-2012q1-test1.tt:70:
cmps112-2012q1-test1.tt:71:10. Write a program in Perl which prints out all of the command line
cmps112-2012q1-test1.tt:72:    arguments (but not the program name) on one line, each separated
cmps112-2012q1-test1.tt:73:    from the next with one space, but does not print a space in the
cmps112-2012q1-test1.tt:74:    front or at the end.  It finishes by printing a newline character.
cmps112-2012q1-test1.tt:75:    [1pt]
cmps112-2012q1-test1.tt:76:
cmps112-2012q1-test1.tt:77:    #!/usr/bin/perl
cmps112-2012q1-test1.tt:78:
cmps112-2012q1-test1.tt:79:Multiple choice.  To the left of each question, write the letter that
cmps112-2012q1-test1.tt:80:indicates your answer.  Write Z if you don't want to risk a wrong
cmps112-2012q1-test1.tt:81:answer.  Wrong answers are worth negative points.  [11pt]
cmps112-2012q1-test1.tt:82:
cmps112-2012q1-test1.tt:83:+--------------------------+------+------+------------+
cmps112-2012q1-test1.tt:84:|number of                 |      |× 1 = |      $= a$ |
cmps112-2012q1-test1.tt:85:|correct answers           |      |      |            |
cmps112-2012q1-test1.tt:86:+--------------------------+------+------+------------+
cmps112-2012q1-test1.tt:87:|number of                 |      |× ½ = |      $= b$ |
cmps112-2012q1-test1.tt:88:|wrong answers             |      |      |            |
cmps112-2012q1-test1.tt:89:+--------------------------+------+------+------------+
cmps112-2012q1-test1.tt:90:|number of                 |      |× 0 = |  0         |
cmps112-2012q1-test1.tt:91:|missing answers           |      |      |            |
cmps112-2012q1-test1.tt:92:+--------------------------+------+------+------------+
cmps112-2012q1-test1.tt:93:|column total              |   11 |      |      $= c$ |
cmps112-2012q1-test1.tt:94:|$ c = max ( a - b , 0 ) $ |      |      |            |
cmps112-2012q1-test1.tt:95:+--------------------------+------+------+------------+
cmps112-2012q1-test1.tt:96:
cmps112-2012q1-test1.tt:97: 1. Which of these languages evaluates expressions in a lazy manner by
cmps112-2012q1-test1.tt:98:    default?
cmps112-2012q1-test1.tt:99:    (A) Haskell
cmps112-2012q1-test1.tt:100:    (B) Lisp
cmps112-2012q1-test1.tt:101:    (C) Perl
cmps112-2012q1-test1.tt:102:    (D) Scheme
cmps112-2012q1-test1.tt:103:
cmps112-2012q1-test1.tt:104: 2. Which of the following C operators is ``lazy''?
cmps112-2012q1-test1.tt:105:    (A) &&
cmps112-2012q1-test1.tt:106:    (B) ++
cmps112-2012q1-test1.tt:107:    (C) ==
cmps112-2012q1-test1.tt:108:    (D) >>
cmps112-2012q1-test1.tt:109:
cmps112-2012q1-test1.tt:110: 3. What is the running time of the following function?
cmps112-2012q1-test1.tt:111:       (define (f n)
cmps112-2012q1-test1.tt:112:          (if (< n 2) n
cmps112-2012q1-test1.tt:113:              (+ (f (- n 1)) (f (- n 2)))))
cmps112-2012q1-test1.tt:114:    (A) $ O ( n ) $
cmps112-2012q1-test1.tt:115:    (B) $ O ( log sub 2 n ) $
cmps112-2012q1-test1.tt:116:    (C) $ O ( n sup 2 ) $
cmps112-2012q1-test1.tt:117:    (D) $ O ( 2 sup n ) $
cmps112-2012q1-test1.tt:118:
cmps112-2012q1-test1.tt:119: 4. What amount of stack space is taken up by evaluating that same
cmps112-2012q1-test1.tt:120:    function?
cmps112-2012q1-test1.tt:121:    (A) $ O ( n ) $
cmps112-2012q1-test1.tt:122:    (B) $ O ( log sub 2 n ) $
cmps112-2012q1-test1.tt:123:    (C) $ O ( n sup 2 ) $
cmps112-2012q1-test1.tt:124:    (D) $ O ( 2 sup n ) $
cmps112-2012q1-test1.tt:125:
cmps112-2012q1-test1.tt:126: 5. What is the value of:
cmps112-2012q1-test1.tt:127:       (cadr '((1 2 3) (4 5 6) (7 8 9)))
cmps112-2012q1-test1.tt:128:    (A) 1
cmps112-2012q1-test1.tt:129:    (B) (4 5 6)
cmps112-2012q1-test1.tt:130:    (C) (2 3)
cmps112-2012q1-test1.tt:131:    (D) ((7 8 9))
cmps112-2012q1-test1.tt:132:
cmps112-2012q1-test1.tt:133: 6. In C, when is a static local variable bound to a particular
cmps112-2012q1-test1.tt:134:    virtual address?
cmps112-2012q1-test1.tt:135:    (A) When the program is compiled.
cmps112-2012q1-test1.tt:136:    (B) When the program is linked.
cmps112-2012q1-test1.tt:137:    (C) When the program is loaded into execution by the exec system
cmps112-2012q1-test1.tt:138:        call.
cmps112-2012q1-test1.tt:139:    (D) When the function in which it is declared is called.
cmps112-2012q1-test1.tt:140:
cmps112-2012q1-test1.tt:141: 7. Data types in Perl and Scheme are:
cmps112-2012q1-test1.tt:142:    (A) strong and dynamic.
cmps112-2012q1-test1.tt:143:    (B) strong and static.
cmps112-2012q1-test1.tt:144:    (C) weak and dynamic.
cmps112-2012q1-test1.tt:145:    (D) weak and static.
cmps112-2012q1-test1.tt:146:
cmps112-2012q1-test1.tt:147: 8. A static link in a stack frame points at:
cmps112-2012q1-test1.tt:148:    (A) the address of the call instruction that activated this
cmps112-2012q1-test1.tt:149:        function.
cmps112-2012q1-test1.tt:150:    (B) the stack frame of the calling function.
cmps112-2012q1-test1.tt:151:    (C) the stack frame of the function in which this function is
cmps112-2012q1-test1.tt:152:        nested.
cmps112-2012q1-test1.tt:153:    (D) the top of the function call stack.
cmps112-2012q1-test1.tt:154:
cmps112-2012q1-test1.tt:155: 9. Assuming only pure Java code with no sneaky tricks written in C,
cmps112-2012q1-test1.tt:156:    If M = memory leaks, D = dangling references, and U = unsafe type
cmps112-2012q1-test1.tt:157:    conversions or casting, which of the following are possible in
cmps112-2012q1-test1.tt:158:    Java?
cmps112-2012q1-test1.tt:159:    (A) all of them.
cmps112-2012q1-test1.tt:160:    (B) none of them.
cmps112-2012q1-test1.tt:161:    (C) only D, but neither M nor U.
cmps112-2012q1-test1.tt:162:    (D) only M, but neither D nor U.
cmps112-2012q1-test1.tt:163:
cmps112-2012q1-test1.tt:164:10. Given the C declaration char **p;, which expression is invalid?
cmps112-2012q1-test1.tt:165:    (A) &(&p)
cmps112-2012q1-test1.tt:166:    (B) &(*p)
cmps112-2012q1-test1.tt:167:    (C) *(&p)
cmps112-2012q1-test1.tt:168:    (D) *(*p)
cmps112-2012q1-test1.tt:169:
cmps112-2012q1-test1.tt:170:11. John Backus, 1953, IBM 704.
cmps112-2012q1-test1.tt:171:    (A) ALGOL
cmps112-2012q1-test1.tt:172:    (B) COBOL
cmps112-2012q1-test1.tt:173:    (C) FORTRAN
cmps112-2012q1-test1.tt:174:    (D) LISP
cmps112-2012q1-test1.tt:175:
cmps112-2014q4-test1.tt:1:gnroff-1.18.1.1 -mgm -Tlatin1 cmps112-2014q4-exam1.qrf               1
cmps112-2014q4-test1.tt:2:2014-10-23
cmps112-2014q4-test1.tt:3:
cmps112-2014q4-test1.tt:4:cmps112-2014q4-exam1.mm:277: backtrace: string `Fmark'
cmps112-2014q4-test1.tt:5:cmps112-2014q4-exam1.mm:278: warning: can't find special character
cmps112-2014q4-test1.tt:6:`dg'
cmps112-2014q4-test1.tt:7:
cmps112-2014q4-test1.tt:8:.PS
cmps112-2014q4-test1.tt:9:examboxes(3)
cmps112-2014q4-test1.tt:10:.PE
cmps112-2014q4-test1.tt:11:
cmps112-2014q4-test1.tt:12:No books;  No calculator;  No computer;  No email;  No internet;  No
cmps112-2014q4-test1.tt:13:notes;  No phone.  Neatness counts!  Do your scratch work elsewhere
cmps112-2014q4-test1.tt:14:and enter only your final answer into the spaces provided.
cmps112-2014q4-test1.tt:15:
cmps112-2014q4-test1.tt:16:.EQ
cmps112-2014q4-test1.tt:17:delim $$
cmps112-2014q4-test1.tt:18:.EN
cmps112-2014q4-test1.tt:19:
cmps112-2014q4-test1.tt:20:1. For each language described here, fill in the name of the language.
cmps112-2014q4-test1.tt:21:   Choose from among the following languages:  Algol 60, AWK, Basic,
cmps112-2014q4-test1.tt:22:   C++, C, COBOL, FORTRAN, Haskell, Intercal, Java, Lisp, ML, OCaml,
cmps112-2014q4-test1.tt:23:   Pascal, Perl, PL/I, Prolog, Simula 67.  (Grading:  deduct 1/2 point
cmps112-2014q4-test1.tt:24:   for each wrong or missing answer, but do not score less than 0.)
cmps112-2014q4-test1.tt:25:   [3pt]
cmps112-2014q4-test1.tt:26:
cmps112-2014q4-test1.tt:27:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:28:   |              |Bjarne Stroustrup's most noted contribution to language design.                  |
cmps112-2014q4-test1.tt:29:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:30:   |              |Business data processing language, designers included Grace Hopper.              |
cmps112-2014q4-test1.tt:31:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:32:   |              |Designed in Europe to express algorithms in a structured way.                    |
cmps112-2014q4-test1.tt:33:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:34:   |              |First version of Unix was 9000 lines of this language (plus some assembly code). |
cmps112-2014q4-test1.tt:35:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:36:   |              |List processing language typically used in artificial intelligence.              |
cmps112-2014q4-test1.tt:37:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:38:   |              |Numeric and scientific computation language developed at IBM.                    |
cmps112-2014q4-test1.tt:39:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:40:   |              |Simulation language that influenced the design of C++.                           |
cmps112-2014q4-test1.tt:41:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:42:   |              |Small language for structured programming designed by Niklaus Wirth.             |
cmps112-2014q4-test1.tt:43:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:44:   |              |Sun Microsystems claimed this language is ``write once, run anywhere''.          |
cmps112-2014q4-test1.tt:45:   +--------------+---------------------------------------------------------------------------------+
cmps112-2014q4-test1.tt:46:
cmps112-2014q4-test1.tt:47:2. Write a program in perl which reads in lines using <>.  Each line
cmps112-2014q4-test1.tt:48:   consists of three numbers.  At end of file print out the totals of
cmps112-2014q4-test1.tt:49:   each of the three columns of numbers.  [3pt]
cmps112-2014q4-test1.tt:50:
cmps112-2014q4-test1.tt:51:3. Define a Smalltalk class Complex.  [4pt]
cmps112-2014q4-test1.tt:52:   (a) It has two instance fields real and imag.
cmps112-2014q4-test1.tt:53:   (b) Define the instance methods real:  (sets imag to 0), imag:
cmps112-2014q4-test1.tt:54:      (sets real to 0), and real:imag:  (sets both).
cmps112-2014q4-test1.tt:55:   (c) Define the binary operator +, which assumes the operand is
cmps112-2014q4-test1.tt:56:      another Complex and returns the sum.
cmps112-2014q4-test1.tt:57:
cmps112-2014q4-test1.tt:58:4. Using a loop, not recursion, write a function whose single argument
cmps112-2014q4-test1.tt:59:   is a number and which returns the factorial of that number.  Return
cmps112-2014q4-test1.tt:60:   1 for any number less-equal 0.  Do not consider what happens when
cmps112-2014q4-test1.tt:61:   the result is very large.
cmps112-2014q4-test1.tt:62:
cmps112-2014q4-test1.tt:63:    (a) In Perl, write a sub.  [1pt]
cmps112-2014q4-test1.tt:64:
cmps112-2014q4-test1.tt:65:    (b) In Smalltalk, extend the class Number with the unary selector
cmps112-2014q4-test1.tt:66:        fac.  [2pt]
cmps112-2014q4-test1.tt:67:
cmps112-2014q4-test1.tt:68:5. Name two kinds if universal polymorphism and give an extremely
cmps112-2014q4-test1.tt:69:   brief example of each in Java or C++.  [2pt]
cmps112-2014q4-test1.tt:70:
cmps112-2014q4-test1.tt:71:6. Name two kinds if ad hoc polymorphism and give an extremely brief
cmps112-2014q4-test1.tt:72:   example of each in Java or C++.  [2pt]
cmps112-2014q4-test1.tt:73:
cmps112-2014q4-test1.tt:74:7. Using Perl, write a program that reads lines from files using <>,
cmps112-2014q4-test1.tt:75:   and splits each line into words.  A word is any sequence of
cmps112-2014q4-test1.tt:76:   characters delimited by m/\W+/, that is non-alphanumeric
cmps112-2014q4-test1.tt:77:   characters.  Count the frequency of occurrence of each word.  At
cmps112-2014q4-test1.tt:78:   end of file, print out the ten most frequently occurring words in
cmps112-2014q4-test1.tt:79:   descending order, along with the number of times each appeared in
cmps112-2014q4-test1.tt:80:   the input.  [3pt]
cmps112-2014q4-test1.tt:81:
cmps112-2014q4-test1.tt:82:Multiple choice.  To the left of each question, write the letter that
cmps112-2014q4-test1.tt:83:indicates your answer.  Write Z if you don't want to risk a wrong
cmps112-2014q4-test1.tt:84:answer.  Wrong answers are worth negative points.  [12pt]
cmps112-2014q4-test1.tt:85:
cmps112-2014q4-test1.tt:86:+--------------------------+------+------+------------+
cmps112-2014q4-test1.tt:87:|number of                 |      |× 1 = |      $= a$ |
cmps112-2014q4-test1.tt:88:|correct answers           |      |      |            |
cmps112-2014q4-test1.tt:89:+--------------------------+------+------+------------+
cmps112-2014q4-test1.tt:90:|number of                 |      |× ½ = |      $= b$ |
cmps112-2014q4-test1.tt:91:|wrong answers             |      |      |            |
cmps112-2014q4-test1.tt:92:+--------------------------+------+------+------------+
cmps112-2014q4-test1.tt:93:|number of                 |      |× 0 = |  0         |
cmps112-2014q4-test1.tt:94:|missing answers           |      |      |            |
cmps112-2014q4-test1.tt:95:+--------------------------+------+------+------------+
cmps112-2014q4-test1.tt:96:|column total              |   12 |      |      $= c$ |
cmps112-2014q4-test1.tt:97:|$ c = max ( a - b , 0 ) $ |      |      |            |
cmps112-2014q4-test1.tt:98:+--------------------------+------+------+------------+
cmps112-2014q4-test1.tt:99:
cmps112-2014q4-test1.tt:100: 1. Which of the following C operators uses lazy evaluation?
cmps112-2014q4-test1.tt:101:    (A) !=
cmps112-2014q4-test1.tt:102:    (B) *=
cmps112-2014q4-test1.tt:103:    (C) >>
cmps112-2014q4-test1.tt:104:    (D) ? :
cmps112-2014q4-test1.tt:105:
cmps112-2014q4-test1.tt:106: 2. The Perl variable equivalent to strerror(errno) is:
cmps112-2014q4-test1.tt:107:    (A) $!
cmps112-2014q4-test1.tt:108:    (B) $0
cmps112-2014q4-test1.tt:109:    (C) $?
cmps112-2014q4-test1.tt:110:    (D) $_
cmps112-2014q4-test1.tt:111:
cmps112-2014q4-test1.tt:112: 3. In Smalltalk, a-b*c+d is equivalent to:
cmps112-2014q4-test1.tt:113:    (A) ((a-b)*c)+d
cmps112-2014q4-test1.tt:114:    (B) (a-(b*c))+d
cmps112-2014q4-test1.tt:115:    (C) (a-b)*(c+d)
cmps112-2014q4-test1.tt:116:    (D) a-(b*(c+d))
cmps112-2014q4-test1.tt:117:
cmps112-2014q4-test1.tt:118: 4. In Smalltalk, what produces 13?
cmps112-2014q4-test1.tt:119:    (A) '4+9' value
cmps112-2014q4-test1.tt:120:    (B) (4+9) value
cmps112-2014q4-test1.tt:121:    (C) [4+9] value
cmps112-2014q4-test1.tt:122:    (D) {4+9} value
cmps112-2014q4-test1.tt:123:
cmps112-2014q4-test1.tt:124: 5. Assuming pure Java code with no native methods written in C, if M
cmps112-2014q4-test1.tt:125:    = memory leaks and D = dangling references, then which are
cmps112-2014q4-test1.tt:126:    possible?
cmps112-2014q4-test1.tt:127:    (A) D is possible, but not M.
cmps112-2014q4-test1.tt:128:    (B) M is possible, but not D.
cmps112-2014q4-test1.tt:129:    (C) both M and D.
cmps112-2014q4-test1.tt:130:    (D) neither M nor D.
cmps112-2014q4-test1.tt:131:
cmps112-2014q4-test1.tt:132: 6. In C and C++, when is an external variable bound to a particular
cmps112-2014q4-test1.tt:133:    address?
cmps112-2014q4-test1.tt:134:    (A) When the preprocessor is run.
cmps112-2014q4-test1.tt:135:    (B) When the program is compiled.
cmps112-2014q4-test1.tt:136:    (C) When the program is linked.
cmps112-2014q4-test1.tt:137:    (D) When the main function is called.
cmps112-2014q4-test1.tt:138:
cmps112-2014q4-test1.tt:139: 7. In Perl, to apply a block to every element of an array, what
cmps112-2014q4-test1.tt:140:    function is used?
cmps112-2014q4-test1.tt:141:    (A) grep
cmps112-2014q4-test1.tt:142:    (B) join
cmps112-2014q4-test1.tt:143:    (C) map
cmps112-2014q4-test1.tt:144:    (D) split
cmps112-2014q4-test1.tt:145:
cmps112-2014q4-test1.tt:146: 8. If $p is a reference to a Perl hash and $k is a key whose
cmps112-2014q4-test1.tt:147:    corresponding value is a scalar, how is the value extracted?
cmps112-2014q4-test1.tt:148:    (A) $p->{$k}
cmps112-2014q4-test1.tt:149:    (B) $p{$k}
cmps112-2014q4-test1.tt:150:    (C) %p->{$k}
cmps112-2014q4-test1.tt:151:    (D) %p{$k}
cmps112-2014q4-test1.tt:152:
cmps112-2014q4-test1.tt:153: 9. If we define the block sum := [:i :j| i + j] in Smalltalk, how
cmps112-2014q4-test1.tt:154:    might we obtain the number 7?
cmps112-2014q4-test1.tt:155:    (A) 3 4 sum
cmps112-2014q4-test1.tt:156:    (B) 3 sum: 4
cmps112-2014q4-test1.tt:157:    (C) sum 3 value 4 value
cmps112-2014q4-test1.tt:158:    (D) sum value: 3 value: 4
cmps112-2014q4-test1.tt:159:
cmps112-2014q4-test1.tt:160:10. What is not false in Perl?
cmps112-2014q4-test1.tt:161:    (A) 0
cmps112-2014q4-test1.tt:162:    (B) 0.0/0.0
cmps112-2014q4-test1.tt:163:    (C) ""
cmps112-2014q4-test1.tt:164:    (D) undef
cmps112-2014q4-test1.tt:165:
cmps112-2014q4-test1.tt:166:11. What does the static link in a stack frame point at?
cmps112-2014q4-test1.tt:167:    (A) The call instruction that activated this function.
cmps112-2014q4-test1.tt:168:    (B) The heap allocated closure in which escaping variables are
cmps112-2014q4-test1.tt:169:        stored.
cmps112-2014q4-test1.tt:170:    (C) The stack frame of the function in which this function is
cmps112-2014q4-test1.tt:171:        nested.
cmps112-2014q4-test1.tt:172:    (D) The stack frame of the function that called this function.
cmps112-2014q4-test1.tt:173:
cmps112-2014q4-test1.tt:174:12. Structured programming demands the elimination of what statement?
cmps112-2014q4-test1.tt:175:    (A) goto
cmps112-2014q4-test1.tt:176:    (B) switch
cmps112-2014q4-test1.tt:177:    (C) throw
cmps112-2014q4-test1.tt:178:    (D) while
cmps112-2014q4-test1.tt:179:
cmps112-2014q4-test1.tt:181:
cmps112-2014q4-test1.tt:182: EWD498:   How do we tell truths that might hurt?  Prof. Dr. Edsger W.
cmps112-2014q4-test1.tt:183: Dijkstra, June 1975.
cmps112-2014q4-test1.tt:184: · FORTRAN, ``the infantile disorder'', by now nearly 20 years old, is
cmps112-2014q4-test1.tt:185:   hopelessly inadequate for whatever computer application you have in
cmps112-2014q4-test1.tt:186:   mind today:  it is now too clumsy, too risky, and too expensive  to
cmps112-2014q4-test1.tt:187:   use.
cmps112-2014q4-test1.tt:188: · PL/I,  ``the  fatal disease'', belongs more to the problem set than
cmps112-2014q4-test1.tt:189:   to the solution set.
cmps112-2014q4-test1.tt:190: · It is practically impossible to teach good programming to  students
cmps112-2014q4-test1.tt:191:   that  have had a prior exposure to BASIC:  as potential programmers
cmps112-2014q4-test1.tt:192:   they are mentally mutilated beyond hope of regeneration.
cmps112-2014q4-test1.tt:193: · The  use  of  COBOL  cripples  the  mind;   its  teaching   should,
cmps112-2014q4-test1.tt:194:   therefore, be regarded as a criminal offence.
cmps112-2014q4-test1.tt:195:
cmps112-2015q4-test1.tt:1:CMPS-112 · Comparative Programming Languages · Fall 2015 · Test 11of 1
cmps112-2015q4-test1.tt:2:$Id: cmps112-2015q4-exam1.mm,v 1.52 2015-10-21 14:42:06-07 - - $
cmps112-2015q4-test1.tt:3:
cmps112-2015q4-test1.tt:4:.PS
cmps112-2015q4-test1.tt:5:examboxes(3)
cmps112-2015q4-test1.tt:6:.PE
cmps112-2015q4-test1.tt:7:
cmps112-2015q4-test1.tt:8:No books;  No calculator;  No computer;  No email;  No internet;  No
cmps112-2015q4-test1.tt:9:notes;  No phone.  Neatness counts!  Do your scratch work elsewhere
cmps112-2015q4-test1.tt:10:and enter only your final answer into the spaces provided.
cmps112-2015q4-test1.tt:11:
cmps112-2015q4-test1.tt:12:.EQ
cmps112-2015q4-test1.tt:13:delim $$
cmps112-2015q4-test1.tt:14:.EN
cmps112-2015q4-test1.tt:15:
cmps112-2015q4-test1.tt:16:1. What are the very general possibilities that a function might
cmps112-2015q4-test1.tt:17:   exhibit when called?  [2pt]
cmps112-2015q4-test1.tt:18:
cmps112-2015q4-test1.tt:19:    (a)
cmps112-2015q4-test1.tt:20:
cmps112-2015q4-test1.tt:21:    (b)
cmps112-2015q4-test1.tt:22:
cmps112-2015q4-test1.tt:23:    (c)
cmps112-2015q4-test1.tt:24:
cmps112-2015q4-test1.tt:25:    (d)
cmps112-2015q4-test1.tt:26:
cmps112-2015q4-test1.tt:27:2. Define the function filter whose first argument is a predicate and
cmps112-2015q4-test1.tt:28:   whose second argument is a list.  It returns a list consisting of
cmps112-2015q4-test1.tt:29:   all elements of the argument list which satisfy the predicate.  Do
cmps112-2015q4-test1.tt:30:   not use a higher-order function.
cmps112-2015q4-test1.tt:31:
cmps112-2015q4-test1.tt:32:    (a) Scheme.  [2pt]
cmps112-2015q4-test1.tt:33:        > (filter (lambda (x) (> x 0)) '(1 -1 2 -3 5 -99 8))
cmps112-2015q4-test1.tt:34:        (1 2 5 8)
cmps112-2015q4-test1.tt:35:        > (filter even '(1 2 3 4 5 6 7 8 9))
cmps112-2015q4-test1.tt:36:        (2 4 6 8)
cmps112-2015q4-test1.tt:37:
cmps112-2015q4-test1.tt:38:    (b) Ocaml.  [2pt]
cmps112-2015q4-test1.tt:39:        # filter;;
cmps112-2015q4-test1.tt:40:        - : ('a -> bool) -> 'a list -> 'a list = <fun>
cmps112-2015q4-test1.tt:41:        # filter (fun x -> x > 0) [1;-1;2;-3;5;-99;8];;
cmps112-2015q4-test1.tt:42:        - : int list = [1; 2; 5; 8]
cmps112-2015q4-test1.tt:43:        # filter even [1;2;3;4;5;6;7;8;9];;
cmps112-2015q4-test1.tt:44:        - : int list = [2; 4; 6; 8]
cmps112-2015q4-test1.tt:45:
cmps112-2015q4-test1.tt:46:3. Define the function length, which returns the length of a list.
cmps112-2015q4-test1.tt:47:   Use tail-recursion:  the function must use $ O ( 1 ) $ stack.  Do
cmps112-2015q4-test1.tt:48:   not use a higher-order function.
cmps112-2015q4-test1.tt:49:
cmps112-2015q4-test1.tt:50:    (a) Scheme.  [1pt]
cmps112-2015q4-test1.tt:51:        > (length '(1 2 3 4 5))
cmps112-2015q4-test1.tt:52:        5
cmps112-2015q4-test1.tt:53:
cmps112-2015q4-test1.tt:54:    (b) Ocaml.  [1pt]
cmps112-2015q4-test1.tt:55:        # length;;
cmps112-2015q4-test1.tt:56:        - : 'a list -> int = <fun>
cmps112-2015q4-test1.tt:57:        # length [1;2;3;4;5];;
cmps112-2015q4-test1.tt:58:        - : int = 5
cmps112-2015q4-test1.tt:59:
cmps112-2015q4-test1.tt:60:4. Code sub' according to the specifications of the project.  Assume
cmps112-2015q4-test1.tt:61:   that the number of larger magnitude is the first argument, and the
cmps112-2015q4-test1.tt:62:   carry is the third argument.  Assume sub has taken care of the
cmps112-2015q4-test1.tt:63:   signs so that sub' does not need to do so.  [2pt]
cmps112-2015q4-test1.tt:64:   val sub' : int list -> int list -> int -> int list
cmps112-2015q4-test1.tt:65:
cmps112-2015q4-test1.tt:66:5. Define the function fold_left:  the first argument is a function to
cmps112-2015q4-test1.tt:67:   use to fold the list, the second argument is a unit value used to
cmps112-2015q4-test1.tt:68:   fold the first element, the third argument is a list.  Use tail
cmps112-2015q4-test1.tt:69:   recursion:  the function must use $ O ( 1 ) $ stack.
cmps112-2015q4-test1.tt:70:
cmps112-2015q4-test1.tt:71:    (a) Scheme.  [2pt]
cmps112-2015q4-test1.tt:72:        > (define (length list) (fold_left (lambda (n _) (+ n 1)) 0
cmps112-2015q4-test1.tt:73:        list))
cmps112-2015q4-test1.tt:74:        > (define (sum list) (fold_left + 0 list))
cmps112-2015q4-test1.tt:75:        > (length '(1 2 3 4 5))
cmps112-2015q4-test1.tt:76:        5
cmps112-2015q4-test1.tt:77:        > (sum '(1 2 3 4 5))
cmps112-2015q4-test1.tt:78:        15
cmps112-2015q4-test1.tt:79:
cmps112-2015q4-test1.tt:80:    (b) Ocaml.  [2pt]
cmps112-2015q4-test1.tt:81:        # fold_left;;
cmps112-2015q4-test1.tt:82:        - : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
cmps112-2015q4-test1.tt:83:        # let length list = fold_left (fun n _ -> n + 1) 0 list;;
cmps112-2015q4-test1.tt:84:        val length : 'a list -> int = <fun>
cmps112-2015q4-test1.tt:85:        # let sum list = fold_left (+) 0 list;;
cmps112-2015q4-test1.tt:86:        val sum : int list -> int = <fun>
cmps112-2015q4-test1.tt:87:        # length [1;2;3;4;5];;
cmps112-2015q4-test1.tt:88:        - : int = 5
cmps112-2015q4-test1.tt:89:        # sum [1;2;3;4;5];;
cmps112-2015q4-test1.tt:90:        - : int = 15
cmps112-2015q4-test1.tt:91:
cmps112-2015q4-test1.tt:92:6. Define the function reverse which produces a list in reverse order
cmps112-2015q4-test1.tt:93:   to that of its argument.  The function must use $ O ( 1 ) $ stack.
cmps112-2015q4-test1.tt:94:   You may use a tail-recursive function, or make it very simple by a
cmps112-2015q4-test1.tt:95:   call to fold_left.
cmps112-2015q4-test1.tt:96:   Bonus points:  These two ``reverse'' questions are worth 3 points
cmps112-2015q4-test1.tt:97:   each, not 2 points, if you correctly define them in terms of fold_
cmps112-2015q4-test1.tt:98:   left instead of writing a recursive function.
cmps112-2015q4-test1.tt:99:
cmps112-2015q4-test1.tt:100:    (a) Scheme.  [2pt]  (3 points if you use fold_left correctly.)
cmps112-2015q4-test1.tt:101:        > (reverse '(1 2 3 4 5))
cmps112-2015q4-test1.tt:102:        (5 4 3 2 1)
cmps112-2015q4-test1.tt:103:        > (reverse '())
cmps112-2015q4-test1.tt:104:        ()
cmps112-2015q4-test1.tt:105:
cmps112-2015q4-test1.tt:106:    (b) Ocaml.  [2pt]  (3 points if you use fold_left correctly.)
cmps112-2015q4-test1.tt:107:        # reverse;;
cmps112-2015q4-test1.tt:108:        - : 'a list -> 'a list = <fun>
cmps112-2015q4-test1.tt:109:        # reverse [1;2;3;4;5];;
cmps112-2015q4-test1.tt:110:        - : int list = [5; 4; 3; 2; 1]
cmps112-2015q4-test1.tt:111:        # reverse [];;
cmps112-2015q4-test1.tt:112:        - : 'a list = []
cmps112-2015q4-test1.tt:113:
cmps112-2015q4-test1.tt:114:7. C or C++.  Code the function in C or C++ to reverse a list.  Do not
cmps112-2015q4-test1.tt:115:   allocate or free any memory.  Do not cause memory leak or use
cmps112-2015q4-test1.tt:116:   uninitialized memory.  Assume the nodes are properly initialized as
cmps112-2015q4-test1.tt:117:   a valid linked list.  Use $ O ( 1 ) $ stack space.  [2pt]
cmps112-2015q4-test1.tt:118:                             |
cmps112-2015q4-test1.tt:119:   typedef struct node node; | node* reverse (node* head) {
cmps112-2015q4-test1.tt:120:   struct node {             |
cmps112-2015q4-test1.tt:121:      int value;             |
cmps112-2015q4-test1.tt:122:      node* link;            |
cmps112-2015q4-test1.tt:123:   };                        |
cmps112-2015q4-test1.tt:124:
cmps112-2015q4-test1.tt:125:Multiple choice.  To the left of each question, write the letter that
cmps112-2015q4-test1.tt:126:indicates your answer.  Write Z if you don't want to risk a wrong
cmps112-2015q4-test1.tt:127:answer.  Wrong answers are worth negative points.  [12pt]
cmps112-2015q4-test1.tt:128:
cmps112-2015q4-test1.tt:129:+--------------------------+------+------+------------+
cmps112-2015q4-test1.tt:130:|number of                 |      |× 1 = |      $= a$ |
cmps112-2015q4-test1.tt:131:|correct answers           |      |      |            |
cmps112-2015q4-test1.tt:132:+--------------------------+------+------+------------+
cmps112-2015q4-test1.tt:133:|number of                 |      |× ½ = |      $= b$ |
cmps112-2015q4-test1.tt:134:|wrong answers             |      |      |            |
cmps112-2015q4-test1.tt:135:+--------------------------+------+------+------------+
cmps112-2015q4-test1.tt:136:|number of                 |      |× 0 = |  0         |
cmps112-2015q4-test1.tt:137:|missing answers           |      |      |            |
cmps112-2015q4-test1.tt:138:+--------------------------+------+------+------------+
cmps112-2015q4-test1.tt:139:|column total              |   12 |      |      $= c$ |
cmps112-2015q4-test1.tt:140:|$ c = max ( a - b , 0 ) $ |      |      |            |
cmps112-2015q4-test1.tt:141:+--------------------------+------+------+------------+
cmps112-2015q4-test1.tt:142:
cmps112-2015q4-test1.tt:143: 1. What kind of polymorphism is exhibited by generic classes in Java
cmps112-2015q4-test1.tt:144:    and template classes in C++?
cmps112-2015q4-test1.tt:145:    (A) conversion
cmps112-2015q4-test1.tt:146:    (B) inheritance
cmps112-2015q4-test1.tt:147:    (C) overloading
cmps112-2015q4-test1.tt:148:    (D) parametric
cmps112-2015q4-test1.tt:149:
cmps112-2015q4-test1.tt:150: 2. What is ((lambda (f x) (f x)) + 3)?
cmps112-2015q4-test1.tt:151:    (A) '(+ 3)
cmps112-2015q4-test1.tt:152:    (B) '(f x)
cmps112-2015q4-test1.tt:153:    (C) 3
cmps112-2015q4-test1.tt:154:    (D) 6
cmps112-2015q4-test1.tt:155:
cmps112-2015q4-test1.tt:156: 3. What is type of (+) in Ocaml?
cmps112-2015q4-test1.tt:157:    (A) int * int * int
cmps112-2015q4-test1.tt:158:    (B) int * int -> int
cmps112-2015q4-test1.tt:159:    (C) int -> int * int
cmps112-2015q4-test1.tt:160:    (D) int -> int -> int
cmps112-2015q4-test1.tt:161:
cmps112-2015q4-test1.tt:162: 4. What is?
cmps112-2015q4-test1.tt:163:    (car (cdr (cons '(1 2 3) '(4 5 6))))
cmps112-2015q4-test1.tt:164:    (A) '(1 2 3)
cmps112-2015q4-test1.tt:165:    (B) '(4 5 6)
cmps112-2015q4-test1.tt:166:    (C) 1
cmps112-2015q4-test1.tt:167:    (D) 4
cmps112-2015q4-test1.tt:168:
cmps112-2015q4-test1.tt:169: 5. In Ocaml, what is the type of [1;2;3;4]?
cmps112-2015q4-test1.tt:170:    (A) (list int)
cmps112-2015q4-test1.tt:171:    (B) int list
cmps112-2015q4-test1.tt:172:    (C) list->int
cmps112-2015q4-test1.tt:173:    (D) list<int>
cmps112-2015q4-test1.tt:174:
cmps112-2015q4-test1.tt:175: 6. The type system in Scheme are:
cmps112-2015q4-test1.tt:176:    (A) strong and dynamic
cmps112-2015q4-test1.tt:177:    (B) strong and static
cmps112-2015q4-test1.tt:178:    (C) weak and dynamic
cmps112-2015q4-test1.tt:179:    (D) weak and static
cmps112-2015q4-test1.tt:180:
cmps112-2015q4-test1.tt:181: 7. The type system in Ocaml are:
cmps112-2015q4-test1.tt:182:    (A) strong and dynamic
cmps112-2015q4-test1.tt:183:    (B) strong and static
cmps112-2015q4-test1.tt:184:    (C) weak and dynamic
cmps112-2015q4-test1.tt:185:    (D) weak and static
cmps112-2015q4-test1.tt:186:
cmps112-2015q4-test1.tt:187: 8. In C, C++, and Java, which operator is lazy?
cmps112-2015q4-test1.tt:188:    (A) ++
cmps112-2015q4-test1.tt:189:    (B) --
cmps112-2015q4-test1.tt:190:    (C) //
cmps112-2015q4-test1.tt:191:    (D) ||
cmps112-2015q4-test1.tt:192:
cmps112-2015q4-test1.tt:193: 9. What is 2?
cmps112-2015q4-test1.tt:194:    (A) (caar '(1 2 3))
cmps112-2015q4-test1.tt:195:    (B) (cadr '(1 2 3))
cmps112-2015q4-test1.tt:196:    (C) (cdar '(1 2 3))
cmps112-2015q4-test1.tt:197:    (D) (cddr '(1 2 3))
cmps112-2015q4-test1.tt:198:
cmps112-2015q4-test1.tt:199:10. Lisp and Scheme, in general form, are based on a form of
cmps112-2015q4-test1.tt:200:    mathematics first formulated by Alonzo Church.
cmps112-2015q4-test1.tt:201:    (A) \lambda-calculus
cmps112-2015q4-test1.tt:202:    (B) \mu-calculus
cmps112-2015q4-test1.tt:203:    (C) \pi-calculus
cmps112-2015q4-test1.tt:204:    (D) \psi-calculus
cmps112-2015q4-test1.tt:205:
cmps112-2015q4-test1.tt:206:11. Which feature of imperative languages* is missing from Scheme?
cmps112-2015q4-test1.tt:207:    (A) conditionals
cmps112-2015q4-test1.tt:208:    (B) functions
cmps112-2015q4-test1.tt:209:    (C) loops
cmps112-2015q4-test1.tt:210:    (D) variables
cmps112-2015q4-test1.tt:211:
cmps112-2015q4-test1.tt:212:12. In 1968, Edsger W. Dijkstra published a paper entitled ``___
cmps112-2015q4-test1.tt:213:    statement considered harmful''.
cmps112-2015q4-test1.tt:214:    (A) call
cmps112-2015q4-test1.tt:215:    (B) goto
cmps112-2015q4-test1.tt:216:    (C) switch
cmps112-2015q4-test1.tt:217:    (D) throw
cmps112-2015q4-test1.tt:218:
cmps112-2015q4-test1.tt:220:
cmps112-2015q4-test1.tt:221:*EWD498:   How do we tell truths that might hurt?  Prof. Dr. Edsger W.
cmps112-2015q4-test1.tt:222: Dijkstra, June 1975.
cmps112-2015q4-test1.tt:223: · FORTRAN, ``the infantile disorder'', by now nearly 20 years old, is
cmps112-2015q4-test1.tt:224:   hopelessly inadequate for whatever computer application you have in
cmps112-2015q4-test1.tt:225:   mind today:  it is now too clumsy, too risky, and too expensive  to
cmps112-2015q4-test1.tt:226:   use.
cmps112-2015q4-test1.tt:227: · PL/I,  ``the  fatal disease'', belongs more to the problem set than
cmps112-2015q4-test1.tt:228:   to the solution set.
cmps112-2015q4-test1.tt:229: · It is practically impossible to teach good programming to  students
cmps112-2015q4-test1.tt:230:   that  have had a prior exposure to BASIC:  as potential programmers
cmps112-2015q4-test1.tt:231:   they are mentally mutilated beyond hope of regeneration.
cmps112-2015q4-test1.tt:232: · The  use  of  COBOL  cripples  the  mind;   its  teaching   should,
cmps112-2015q4-test1.tt:233:   therefore, be regarded as a criminal offence.
cmps112-2015q4-test1.tt:234:
cmps112-2016q4-midterm.tt:1:CMPS-112 · Programming Languages · Fall 2016 · Midterm Test     1 of 1
cmps112-2016q4-midterm.tt:2:$Id: cmps112-2016q4-exam1.mm,v 1.71 2016-10-21 15:42:40-07 - - $
cmps112-2016q4-midterm.tt:3:
cmps112-2016q4-midterm.tt:4:.PS
cmps112-2016q4-midterm.tt:5:examboxes(5)
cmps112-2016q4-midterm.tt:6:.PE
cmps112-2016q4-midterm.tt:7:
cmps112-2016q4-midterm.tt:8:No books;  No calculator;  No computer;  No email;  No internet;  No
cmps112-2016q4-midterm.tt:9:notes;  No phone.  Do your scratch work elsewhere and enter only your
cmps112-2016q4-midterm.tt:10:final answer into the spaces provided.  Points will be deducted for
cmps112-2016q4-midterm.tt:11:messy answers.  Unreadable answers will be presumed incorrect.
cmps112-2016q4-midterm.tt:12:
cmps112-2016q4-midterm.tt:13:.EQ
cmps112-2016q4-midterm.tt:14:delim $$
cmps112-2016q4-midterm.tt:15:.EN
cmps112-2016q4-midterm.tt:16:
cmps112-2016q4-midterm.tt:17:1. Ocaml.  Define a tail-recursive function evenlen which returns true
cmps112-2016q4-midterm.tt:18:   if its argument is a list of even length and false if there are an
cmps112-2016q4-midterm.tt:19:   odd number of elements in the list.  Do not use a higher-order
cmps112-2016q4-midterm.tt:20:   function.  [2pt]
cmps112-2016q4-midterm.tt:21:   # evenlen [];;
cmps112-2016q4-midterm.tt:22:   - : bool = true
cmps112-2016q4-midterm.tt:23:   # evenlen [1];;
cmps112-2016q4-midterm.tt:24:   - : bool = false
cmps112-2016q4-midterm.tt:25:   # evenlen [1;2];;
cmps112-2016q4-midterm.tt:26:   - : bool = true
cmps112-2016q4-midterm.tt:27:
cmps112-2016q4-midterm.tt:28:2. Scheme.  Define a tail-recursive function oddlen which returns #t
cmps112-2016q4-midterm.tt:29:   if the list has an odd number of elements, and #f if not.  Do not
cmps112-2016q4-midterm.tt:30:   use a higher-order function.  [2pt]
cmps112-2016q4-midterm.tt:31:   > (oddlen '())
cmps112-2016q4-midterm.tt:32:   #f
cmps112-2016q4-midterm.tt:33:   > (oddlen '(1))
cmps112-2016q4-midterm.tt:34:   #t
cmps112-2016q4-midterm.tt:35:   > (oddlen '(1 2))
cmps112-2016q4-midterm.tt:36:   #f
cmps112-2016q4-midterm.tt:37:
cmps112-2016q4-midterm.tt:38:3. Scheme.  Define the tail-recursive function foldl so that it may be
cmps112-2016q4-midterm.tt:39:   used in the following example.  [2pt]
cmps112-2016q4-midterm.tt:40:   > (define (sum list) (foldl + 0 list))
cmps112-2016q4-midterm.tt:41:   > (sum '(1 2 3))
cmps112-2016q4-midterm.tt:42:   6
cmps112-2016q4-midterm.tt:43:
cmps112-2016q4-midterm.tt:44:4. Ocaml.  Define the function reverse to reverse an arbitrary list.
cmps112-2016q4-midterm.tt:45:   Use $ O ( n ) $ time and $ O ( 1 ) $ stack.  You may code tail
cmps112-2016q4-midterm.tt:46:   recursion explicitly, or express the function as a one-liner using
cmps112-2016q4-midterm.tt:47:   List.fold_left.  [2pt]
cmps112-2016q4-midterm.tt:48:   val reverse : 'a list -> 'a list
cmps112-2016q4-midterm.tt:49:   # reverse [1;2;3;4];;
cmps112-2016q4-midterm.tt:50:   - : int list = [4; 3; 2; 1]
cmps112-2016q4-midterm.tt:51:
cmps112-2016q4-midterm.tt:52:5. Scheme.  Draw a picture of the following Scheme expression.  For
cmps112-2016q4-midterm.tt:53:   each cons cell, draw a small box with two arrows coming out of it.
cmps112-2016q4-midterm.tt:54:   Each arrow should point at either another cell or an atom.  Write
cmps112-2016q4-midterm.tt:55:   the Greek letter phi (\phi) to indicate a null pointer.  [2pt]
cmps112-2016q4-midterm.tt:56:   ((a) (b c) ((d e)))
cmps112-2016q4-midterm.tt:57:
cmps112-2016q4-midterm.tt:58:6. Ocaml.  Define length and sum for a list using a \beta-reduced
cmps112-2016q4-midterm.tt:59:   version of the definitions.  Fill in the space with an appropriate
cmps112-2016q4-midterm.tt:60:   fun and another argument.  [2pt]
cmps112-2016q4-midterm.tt:61:   # let foldl = List.fold_left;;
cmps112-2016q4-midterm.tt:62:   val foldl : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
cmps112-2016q4-midterm.tt:63:
cmps112-2016q4-midterm.tt:64:   # let length = foldl
cmps112-2016q4-midterm.tt:65:   _____________________________________________;;
cmps112-2016q4-midterm.tt:66:   val length : '_a list -> int
cmps112-2016q4-midterm.tt:67:
cmps112-2016q4-midterm.tt:68:   # let sum = foldl _____________________________________________;;
cmps112-2016q4-midterm.tt:69:   val sum : int list -> int
cmps112-2016q4-midterm.tt:70:
cmps112-2016q4-midterm.tt:71:7. Ocaml.  Define the function zipwith that takes a function and two
cmps112-2016q4-midterm.tt:72:   lists and returns a new list with the elements combined.  Use
cmps112-2016q4-midterm.tt:73:   failwith if the lists are not of the same length.  [2pt]
cmps112-2016q4-midterm.tt:74:   val zipwith : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
cmps112-2016q4-midterm.tt:75:   # zipwith (+) [1;2;3;4] [5;6;7;8];;
cmps112-2016q4-midterm.tt:76:   - : int list = [6; 8; 10; 12]
cmps112-2016q4-midterm.tt:77:   # zipwith (+) [1;2;3;4] [5;6;7;8;9];;
cmps112-2016q4-midterm.tt:78:   Exception: Failure "zipwith".
cmps112-2016q4-midterm.tt:79:   # zipwith (fun a b -> a,b) [1;2;3] ['a';'b';'c'];;
cmps112-2016q4-midterm.tt:80:   - : (int * char) list = [(1, 'a'); (2, 'b'); (3, 'c')]
cmps112-2016q4-midterm.tt:81:   # zipwith max [1;2;3;4] [4;3;2;1];;
cmps112-2016q4-midterm.tt:82:   - : int list = [4; 3; 3; 4]
cmps112-2016q4-midterm.tt:83:
cmps112-2016q4-midterm.tt:84:8. Ocaml.  In a strongly typed language:
cmps112-2016q4-midterm.tt:85:   (a) Every expression has exactly one type.
cmps112-2016q4-midterm.tt:86:   (b) When an expression is evaluated, exactly one of the following
cmps112-2016q4-midterm.tt:87:       general things might happen:  [2pt]
cmps112-2016q4-midterm.tt:88:
cmps112-2016q4-midterm.tt:89:       (i)
cmps112-2016q4-midterm.tt:90:
cmps112-2016q4-midterm.tt:91:       (ii)
cmps112-2016q4-midterm.tt:92:
cmps112-2016q4-midterm.tt:93:       (iii)
cmps112-2016q4-midterm.tt:94:
cmps112-2016q4-midterm.tt:95:       (iv)
cmps112-2016q4-midterm.tt:96:
cmps112-2016q4-midterm.tt:97:9. Scheme.  The Collatz conjectures states that for any positive
cmps112-2016q4-midterm.tt:98:   integer $n$, if it is repeatedly replaced by $ n / 2 $ when even
cmps112-2016q4-midterm.tt:99:   and $ 3 n + 1 $ when odd, it eventually converges on the integer
cmps112-2016q4-midterm.tt:100:   $1$.  Write a function that uses a tail-recursive inner function to
cmps112-2016q4-midterm.tt:101:   return a list of all integers starting from the argument and ending
cmps112-2016q4-midterm.tt:102:   with 1.  The inner function produces the list in the reverse order,
cmps112-2016q4-midterm.tt:103:   but the outer function reverses the list.  Some Scheme functions to
cmps112-2016q4-midterm.tt:104:   use:  remainder, quotient, reverse, etc.  [4pt]
cmps112-2016q4-midterm.tt:105:   > (collatz 4)
cmps112-2016q4-midterm.tt:106:   (4 2 1)
cmps112-2016q4-midterm.tt:107:   > (collatz 10)
cmps112-2016q4-midterm.tt:108:   (10 5 16 8 4 2 1)
cmps112-2016q4-midterm.tt:109:   > (collatz 20)
cmps112-2016q4-midterm.tt:110:   (20 10 5 16 8 4 2 1)
cmps112-2016q4-midterm.tt:111:   > (collatz 16)
cmps112-2016q4-midterm.tt:112:   (16 8 4 2 1)
cmps112-2016q4-midterm.tt:113:   > (collatz 17)
cmps112-2016q4-midterm.tt:114:   (17 52 26 13 40 20 10 5 16 8 4 2 1)
cmps112-2016q4-midterm.tt:115:
cmps112-2016q4-midterm.tt:116:10. C or C++.  Code a function to reverse a list.  Do not allocate or
cmps112-2016q4-midterm.tt:117:   free any memory.  Do not cause memory leak or use uninitialized
cmps112-2016q4-midterm.tt:118:   memory.  Do not use recursion.  Write a loop which does nothing but
cmps112-2016q4-midterm.tt:119:   manipulate pointers.  Return a pointer to the first node in the
cmps112-2016q4-midterm.tt:120:   reversed list.  [2pt]
cmps112-2016q4-midterm.tt:121:                             |
cmps112-2016q4-midterm.tt:122:   typedef struct node node; | node* reverse (node* head) {
cmps112-2016q4-midterm.tt:123:   struct node {             |
cmps112-2016q4-midterm.tt:124:      int value;             |
cmps112-2016q4-midterm.tt:125:      node* link;            |
cmps112-2016q4-midterm.tt:126:   };                        |
cmps112-2016q4-midterm.tt:127:                             |
cmps112-2016q4-midterm.tt:128:                             | }
cmps112-2016q4-midterm.tt:129:
cmps112-2016q4-midterm.tt:130:11. Scheme.  Define the functions map and filter.  Do not use higher-
cmps112-2016q4-midterm.tt:131:   order functions.
cmps112-2016q4-midterm.tt:132:
cmps112-2016q4-midterm.tt:133:   (a) map [1pt]
cmps112-2016q4-midterm.tt:134:       > (map (lambda (n) (+ 1 n)) '(3 6 9))
cmps112-2016q4-midterm.tt:135:       (4 7 10)
cmps112-2016q4-midterm.tt:136:
cmps112-2016q4-midterm.tt:137:   (b) filter [2pt]
cmps112-2016q4-midterm.tt:138:       > (filter (lambda (n) (< n 4)) '(1 2 3 4 5 6 7))
cmps112-2016q4-midterm.tt:139:       (1 2 3)
cmps112-2016q4-midterm.tt:140:
cmps112-2016q4-midterm.tt:141:Multiple choice.  To the left of each question, write the letter that
cmps112-2016q4-midterm.tt:142:indicates your answer.  Write Z if you don't want to risk a wrong
cmps112-2016q4-midterm.tt:143:answer.  Wrong answers are worth negative points.  [6pt]
cmps112-2016q4-midterm.tt:144:
cmps112-2016q4-midterm.tt:145:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:146:|number of                 |      |× 1 = |      $= a$ |
cmps112-2016q4-midterm.tt:147:|correct answers           |      |      |            |
cmps112-2016q4-midterm.tt:148:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:149:|number of                 |      |× ½ = |      $= b$ |
cmps112-2016q4-midterm.tt:150:|wrong answers             |      |      |            |
cmps112-2016q4-midterm.tt:151:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:152:|number of                 |      |× 0 = |  0         |
cmps112-2016q4-midterm.tt:153:|missing answers           |      |      |            |
cmps112-2016q4-midterm.tt:154:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:155:|column total              |    6 |      |      $= c$ |
cmps112-2016q4-midterm.tt:156:|$ c = max ( a - b , 0 ) $ |      |      |            |
cmps112-2016q4-midterm.tt:157:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:158:
cmps112-2016q4-midterm.tt:159: 1. ``Go To Statement Considered Harmful'', Communications of the ACM,
cmps112-2016q4-midterm.tt:160:    Vol. 11, No. 3, March 1968.
cmps112-2016q4-midterm.tt:161:    (A) John Backus
cmps112-2016q4-midterm.tt:162:    (B) Edsger Dijkstra
cmps112-2016q4-midterm.tt:163:    (C) Donald Knuth
cmps112-2016q4-midterm.tt:164:    (D) John McCarthy
cmps112-2016q4-midterm.tt:165:
cmps112-2016q4-midterm.tt:166: 2. Static type inference is a major feature of:
cmps112-2016q4-midterm.tt:167:    (A) C
cmps112-2016q4-midterm.tt:168:    (B) Java
cmps112-2016q4-midterm.tt:169:    (C) Ocaml
cmps112-2016q4-midterm.tt:170:    (D) Scheme
cmps112-2016q4-midterm.tt:171:
cmps112-2016q4-midterm.tt:172: 3. In smalltalk code is executed by:
cmps112-2016q4-midterm.tt:173:    (A) calling functions which are static members of classes.
cmps112-2016q4-midterm.tt:174:    (B) making use of the standard template library.
cmps112-2016q4-midterm.tt:175:    (C) sending messages to objects.
cmps112-2016q4-midterm.tt:176:    (D) using higher-order functions.
cmps112-2016q4-midterm.tt:177:
cmps112-2016q4-midterm.tt:178: 4. In the expression (lambda (x) (+ x y))
cmps112-2016q4-midterm.tt:179:    (A) x is bound and y is bound.
cmps112-2016q4-midterm.tt:180:    (B) x is bound and y is free.
cmps112-2016q4-midterm.tt:181:    (C) x is free and y is bound.
cmps112-2016q4-midterm.tt:182:    (D) x is free and y is free.
cmps112-2016q4-midterm.tt:183:
cmps112-2016q4-midterm.tt:184: 5. The make language can be referred to as:
cmps112-2016q4-midterm.tt:185:    (A) a functional language.
cmps112-2016q4-midterm.tt:186:    (B) a ``little'' language.
cmps112-2016q4-midterm.tt:187:    (C) a logic language.
cmps112-2016q4-midterm.tt:188:    (D) an object-oriented language.
cmps112-2016q4-midterm.tt:189:
cmps112-2016q4-midterm.tt:190: 6. In Smalltalk, the expression 3+4.  means:
cmps112-2016q4-midterm.tt:191:    (A) The message + is sent to the number 3, the result of which is
cmps112-2016q4-midterm.tt:192:        a function that accepts the message 4.
cmps112-2016q4-midterm.tt:193:    (B) The message +4 is sent to the number 3.
cmps112-2016q4-midterm.tt:194:    (C) The message 3+ is sent to the number 4.
cmps112-2016q4-midterm.tt:195:    (D) The messages 3 and 4 are sent to the operator +.
cmps112-2016q4-midterm.tt:196:
cmps112-2016q4-midterm.tt:197:Multiple choice.  To the left of each question, write the letter that
cmps112-2016q4-midterm.tt:198:indicates your answer.  Write Z if you don't want to risk a wrong
cmps112-2016q4-midterm.tt:199:answer.  Wrong answers are worth negative points.  [12pt]
cmps112-2016q4-midterm.tt:200:
cmps112-2016q4-midterm.tt:201:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:202:|number of                 |      |× 1 = |      $= a$ |
cmps112-2016q4-midterm.tt:203:|correct answers           |      |      |            |
cmps112-2016q4-midterm.tt:204:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:205:|number of                 |      |× ½ = |      $= b$ |
cmps112-2016q4-midterm.tt:206:|wrong answers             |      |      |            |
cmps112-2016q4-midterm.tt:207:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:208:|number of                 |      |× 0 = |  0         |
cmps112-2016q4-midterm.tt:209:|missing answers           |      |      |            |
cmps112-2016q4-midterm.tt:210:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:211:|column total              |   12 |      |      $= c$ |
cmps112-2016q4-midterm.tt:212:|$ c = max ( a - b , 0 ) $ |      |      |            |
cmps112-2016q4-midterm.tt:213:+--------------------------+------+------+------------+
cmps112-2016q4-midterm.tt:214:
cmps112-2016q4-midterm.tt:215: 1. What is the Scheme value of:
cmps112-2016q4-midterm.tt:216:    (caddr '(1 2 3 4 5))
cmps112-2016q4-midterm.tt:217:    (A) (3 4 5)
cmps112-2016q4-midterm.tt:218:    (B) (4 5)
cmps112-2016q4-midterm.tt:219:    (C) 2
cmps112-2016q4-midterm.tt:220:    (D) 3
cmps112-2016q4-midterm.tt:221:
cmps112-2016q4-midterm.tt:222: 2. How much stack space does the following function use?
cmps112-2016q4-midterm.tt:223:    let rec f n = match n with
cmps112-2016q4-midterm.tt:224:        | 0 -> 0
cmps112-2016q4-midterm.tt:225:        | 1 -> 1
cmps112-2016q4-midterm.tt:226:        | n -> f (n - 1) + f (n - 2)
cmps112-2016q4-midterm.tt:227:    (A) $ O ( 1 ) $
cmps112-2016q4-midterm.tt:228:    (B) $ O ( log n ) $
cmps112-2016q4-midterm.tt:229:    (C) $ O ( n ) $
cmps112-2016q4-midterm.tt:230:    (D) $ O ( 2 sup n ) $
cmps112-2016q4-midterm.tt:231:
cmps112-2016q4-midterm.tt:232: 3. What is the Ocaml type signature of:
cmps112-2016q4-midterm.tt:233:    (/);;
cmps112-2016q4-midterm.tt:234:    (A) - : int * int * int
cmps112-2016q4-midterm.tt:235:    (B) - : int * int -> int
cmps112-2016q4-midterm.tt:236:    (C) - : int -> int * int
cmps112-2016q4-midterm.tt:237:    (D) - : int -> int -> int
cmps112-2016q4-midterm.tt:238:
cmps112-2016q4-midterm.tt:239: 4. Which function can be written in a tail recursive purely
cmps112-2016q4-midterm.tt:240:    functional manner?
cmps112-2016q4-midterm.tt:241:    (A) filter
cmps112-2016q4-midterm.tt:242:    (B) fold_left
cmps112-2016q4-midterm.tt:243:    (C) fold_right
cmps112-2016q4-midterm.tt:244:    (D) map
cmps112-2016q4-midterm.tt:245:
cmps112-2016q4-midterm.tt:246: 5. Lisp (McCarthy) and Scheme (Steele and Sussman), in general form,
cmps112-2016q4-midterm.tt:247:    are based on a form of mathematics first formulated by Alonzo
cmps112-2016q4-midterm.tt:248:    Church.
cmps112-2016q4-midterm.tt:249:    (A) \lambda-calculus
cmps112-2016q4-midterm.tt:250:    (B) \mu-calculus
cmps112-2016q4-midterm.tt:251:    (C) \pi-calculus
cmps112-2016q4-midterm.tt:252:    (D) \psi-calculus
cmps112-2016q4-midterm.tt:253:
cmps112-2016q4-midterm.tt:254: 6. Which line is a comment in Scheme?
cmps112-2016q4-midterm.tt:255:    (A) (*...*)
cmps112-2016q4-midterm.tt:256:    (B) /*...*/
cmps112-2016q4-midterm.tt:257:    (C) //...
cmps112-2016q4-midterm.tt:258:    (D) ;;...
cmps112-2016q4-midterm.tt:259:
cmps112-2016q4-midterm.tt:260: 7. What feature of imperative languages is typically missing from
cmps112-2016q4-midterm.tt:261:    functional languages?
cmps112-2016q4-midterm.tt:262:    (A) conditionals
cmps112-2016q4-midterm.tt:263:    (B) functions
cmps112-2016q4-midterm.tt:264:    (C) loops
cmps112-2016q4-midterm.tt:265:    (D) recursion
cmps112-2016q4-midterm.tt:266:
cmps112-2016q4-midterm.tt:267: 8. What is the signature of the Ocaml function List.hd (equivalent to
cmps112-2016q4-midterm.tt:268:    car)?
cmps112-2016q4-midterm.tt:269:    (A) 'a -> 'a list
cmps112-2016q4-midterm.tt:270:    (B) 'a -> 'a
cmps112-2016q4-midterm.tt:271:    (C) 'a list -> 'a list
cmps112-2016q4-midterm.tt:272:    (D) 'a list -> 'a
cmps112-2016q4-midterm.tt:273:
cmps112-2016q4-midterm.tt:274: 9. Given:
cmps112-2016q4-midterm.tt:275:    # List.map ((+)3) [1;2;3];;
cmps112-2016q4-midterm.tt:276:    - : int list = [4; 5; 6]
cmps112-2016q4-midterm.tt:277:    what is the type of List.map ((+)3)?
cmps112-2016q4-midterm.tt:278:    (A) int -> int
cmps112-2016q4-midterm.tt:279:    (B) int -> int list
cmps112-2016q4-midterm.tt:280:    (C) int list -> int
cmps112-2016q4-midterm.tt:281:    (D) int list -> int list
cmps112-2016q4-midterm.tt:282:
cmps112-2016q4-midterm.tt:283:10. In both Java and C++, what keyword is used to restrict access to a
cmps112-2016q4-midterm.tt:284:    class itself but allow access to classes derived from it?
cmps112-2016q4-midterm.tt:285:    (A) inheritance
cmps112-2016q4-midterm.tt:286:    (B) private
cmps112-2016q4-midterm.tt:287:    (C) protected
cmps112-2016q4-midterm.tt:288:    (D) public
cmps112-2016q4-midterm.tt:289:
cmps112-2016q4-midterm.tt:290:11. Backus-Naur format describes what about a language?
cmps112-2016q4-midterm.tt:291:    (A) environment
cmps112-2016q4-midterm.tt:292:    (B) linkage
cmps112-2016q4-midterm.tt:293:    (C) semantics
cmps112-2016q4-midterm.tt:294:    (D) syntax
cmps112-2016q4-midterm.tt:295:
cmps112-2016q4-midterm.tt:296:12. What language was designed by John Kemeny and Thomas Kurtz in
cmps112-2016q4-midterm.tt:297:    1965?
cmps112-2016q4-midterm.tt:298:    (A) BASIC
cmps112-2016q4-midterm.tt:299:    (B) COBOL
cmps112-2016q4-midterm.tt:300:    (C) FORTRAN
cmps112-2016q4-midterm.tt:301:    (D) LISP
cmps112-2016q4-midterm.tt:302:
